{
  "dref": {
    "prefix": "fdref",
    "body": [
      "func dref[T any](a *T) T {",
      "\tif a != nil {",
      "\t\treturn *a",
      "\t}",
      "\tvar r T",
      "\treturn r",
      "}"
    ],
    "description": "Generate a constructor for a Go struct"
  },
  "Constructor": {
    "prefix": "ctor",
    "body": [
      "func New${1:StructName}(${2:params}) *${1:StructName} {",
      "\treturn &${1:StructName}{",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Generate a constructor for a Go struct"
  },
  "Create vkbot State Group": {
    "prefix": "sgvk",
    "body": [
      "var (",
      "\t${1:StateGroupName}SG                     = vkbot.NewStateGroup(\"${1:StateGroupName}\")",
      "\t${1:StateGroupName}${2:FirstState}              = ${1:StateGroupName}SG.New(\"${2:FirstState}\")",
      ")"
    ]
  },
  "doConstructor": {
    "prefix": "dctor",
    "body": [
      "func New${1:StructName}(i do.Injector) (*${1:StructName}, error) {",
      "\treturn &${1:StructName}{",
      "\t\t$0",
      "\t}, nil",
      "}"
    ],
    "description": "Generate a constructor for a Go struct"
  },
  "Create gin web server": {
    "prefix": "webserv",
    "body": [
      "type ${1:WebServer} struct {",
      "addr string",
      "}",
      "",
      "func NewApi(address string) (*${1:WebServer}, error) {",
      "return &${1:WebServer}{",
      "addr: address,",
      "}, nil",
      "}",
      "",
      "func (d *${1:WebServer}) Run() error {",
      "r := gin.Default()",
      "",
      "config := cors.DefaultConfig()",
      "config.AllowAllOrigins = true",
      "config.AllowHeaders = append(config.AllowHeaders, \"user-agent\", \"autorisation\")",
      "r.Use(cors.New(config))",
      "",
      "return r.Run(d.addr)",
      "}"
    ],
    "description": ""
  },
  "Create Gin handler": {
    "prefix": "hand",
    "body": [
      "func (d *${1:Webserver}) ${2:Handler}(c *gin.Context) {$3}"
    ]
  },
  "Err is nil": {
    "prefix": "errisnil",
    "body": "err != nil"
  },
  "Json gin error": {
    "prefix": "jsonerr",
    "body": "c.JSON(${1:http.StatusNotFound}, gin.H{\"error\": err.Error()})"
  },
  "create_fuego_controller": {
    "prefix": "packagecontroller",
    "description": "packagecontroller",
    "body": [
      "package controller",
      "",
      "import (",
      "\t\"github.com/go-fuego/fuego\"",
      ")",
      "",
      "type ${1:NewController}Ressources struct {",
      "\t// TODO add ressources",
      "\t${1:NewController}Service ${1:NewController}Service",
      "}",
      "",
      "type ${1:NewController} struct {",
      "\tID   string `json:\"id\"`",
      "\tName string `json:\"name\"`",
      "}",
      "",
      "type ${1:NewController}Create struct {",
      "\tName string `json:\"name\"`",
      "}",
      "",
      "type ${1:NewController}Update struct {",
      "\tName string `json:\"name\"`",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) Routes(s *fuego.Server) {",
      "\t${1:NewController}Group := fuego.Group(s, \"/${1:NewController}\")",
      "",
      "\tfuego.Get(${1:NewController}Group, \"/\", rs.getAll${1:NewController})",
      "\tfuego.Post(${1:NewController}Group, \"/\", rs.post${1:NewController})",
      "",
      "\tfuego.Get(${1:NewController}Group, \"/{id}\", rs.get${1:NewController})",
      "\tfuego.Put(${1:NewController}Group, \"/{id}\", rs.put${1:NewController})",
      "\tfuego.Delete(${1:NewController}Group, \"/{id}\", rs.delete${1:NewController})",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) getAll${1:NewController}(c fuego.ContextNoBody) ([]${1:NewController}, error) {",
      "\treturn rs.${1:NewController}Service.GetAll${1:NewController}()",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) post${1:NewController}(c *fuego.ContextWithBody[${1:NewController}Create]) (${1:NewController}, error) {",
      "\tbody, err := c.Body()",
      "\tif err != nil {",
      "\t\treturn ${1:NewController}{}, err",
      "\t}",
      "",
      "\tnew, err := rs.${1:NewController}Service.Create${1:NewController}(body)",
      "\tif err != nil {",
      "\t\treturn ${1:NewController}{}, err",
      "\t}",
      "",
      "\treturn new, nil",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) get${1:NewController}(c fuego.ContextNoBody) (${1:NewController}, error) {",
      "\tid := c.PathParam(\"id\")",
      "",
      "\treturn rs.${1:NewController}Service.Get${1:NewController}(id)",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) put${1:NewController}(c *fuego.ContextWithBody[${1:NewController}Update]) (${1:NewController}, error) {",
      "\tid := c.PathParam(\"id\")",
      "",
      "\tbody, err := c.Body()",
      "\tif err != nil {",
      "\t\treturn ${1:NewController}{}, err",
      "\t}",
      "",
      "\tnew, err := rs.${1:NewController}Service.Update${1:NewController}(id, body)",
      "\tif err != nil {",
      "\t\treturn ${1:NewController}{}, err",
      "\t}",
      "",
      "\treturn new, nil",
      "}",
      "",
      "func (rs ${1:NewController}Ressources) delete${1:NewController}(c *fuego.ContextNoBody) (any, error) {",
      "\treturn rs.${1:NewController}Service.Delete${1:NewController}(c.PathParam(\"id\"))",
      "}",
      "",
      "type ${1:NewController}Service interface {",
      "\tGet${1:NewController}(id string) (${1:NewController}, error)",
      "\tCreate${1:NewController}(${1:NewController}Create) (${1:NewController}, error)",
      "\tGetAll${1:NewController}() ([]${1:NewController}, error)",
      "\tUpdate${1:NewController}(id string, input ${1:NewController}Update) (${1:NewController}, error)",
      "\tDelete${1:NewController}(id string) (any, error)",
      "}"
    ]
  },
  "create_huma_controller": {
    "prefix": "packagecontroller",
    "body": [
      "package controller",
      "",
      "import (",
      "\t\"context\"",
      "\t\"net/http\"",
      "",
      "\t\"github.com/danielgtaylor/huma/v2\"",
      ")",
      "",
      "type ${1}sResources struct {",
      "\t${1}Service ${1}Service",
      "}",
      "type ${1}Create struct {",
      "\tLabel string              `json:\"label\"`",
      "\tType  models.${1}Type `json:\"type\"`",
      "}",
      "",
      "type ${1} struct {",
      "\tID    uint                `json:\"id\"`",
      "\tLabel string              `json:\"label\"`",
      "\tType  models.${1}Type `json:\"type\"`",
      "}",
      "",
      "func new${1}(r models.${1}) ${1} {",
      "\tresp := ${1}{",
      "\t\tID:    r.ID,",
      "\t\tLabel: r.Label,",
      "\t\tType:  r.Type,",
      "\t}",
      "",
      "\treturn resp",
      "}",
      "",
      "const ${1}Path = \"/${1}s\"",
      "",
      "func (rs ${1}sResources) Routes(s huma.API) {",
      "\thuma.Get(s, ${1}Path+\"/\", rs.${1}Find)",
      "\thuma.Post(s, ${1}Path+\"/\", rs.${1}Create)",
      "\thuma.Put(s, ${1}Path+\"/{id}\", rs.${1}Update)",
      "\thuma.Delete(s, ${1}Path+\"/{id}\", rs.${1}Delete)",
      "}",
      "",
      "type ${1}CreateInput struct {",
      "\tBody ${1}Create",
      "}",
      "",
      "type ${1}Output struct {",
      "\tBody ${1}",
      "}",
      "",
      "func (rs *${1}sResources) ${1}Create(_ context.Context, c *${1}CreateInput) (*${1}Output, error) {",
      "\tv, err := rs.${1}Service.${1}Create(models.${1}{",
      "\t\tLabel: c.Body.Label,",
      "\t\tType:  c.Body.Type,",
      "\t})",
      "\tif err != nil {",
      "\t\treturn nil, err",
      "\t}",
      "",
      "\treturn &${1}Output{new${1}(v)}, nil",
      "}",
      "",
      "type ${1}UpdateInput struct {",
      "\tID   uint `path:\"id\"`",
      "\tBody ${1}Create",
      "}",
      "",
      "func (rs *${1}sResources) ${1}Update(_ context.Context, c *${1}UpdateInput) (*${1}Output, error) {",
      "\tr := models.${1}{",
      "\t\tID:    c.ID,",
      "\t\tLabel: c.Body.Label,",
      "\t\tType:  c.Body.Type,",
      "\t}",
      "\tif err := rs.${1}Service.${1}Update(r); err != nil {",
      "\t\treturn nil, err",
      "\t}",
      "",
      "\treturn &${1}Output{Body: new${1}(r)}, nil",
      "}",
      "",
      "func (rs *${1}sResources) ${1}Delete(ctx context.Context, c *IDInput) (*struct{}, error) {",
      "\treturn nil, rs.${1}Service.${1}Delete(c.ID)",
      "}",
      "",
      "type ${1}sFindOutput struct {",
      "\tBody []${1}",
      "}",
      "",
      "func (rs *${1}sResources) ${1}Find(ctx context.Context, _ *struct{}) (*${1}sFindOutput, error) {",
      "\tfind, err := rs.${1}Service.${1}s()",
      "\tif err != nil {",
      "\t\treturn nil, err",
      "\t}",
      "",
      "\tresp := &${1}sFindOutput{}",
      "\tresp.Body = make([]${1}, len(find))",
      "\tfor i, v := range find {",
      "\t\tresp.Body[i] = new${1}(v)",
      "\t}",
      "",
      "\treturn resp, err",
      "}",
      "",
      "type ${1}Service interface {",
      "\t${1}Create(ctx context.Context, ${1}) (${1}, error)",
      "\t${1}s(ctx context.Context) ([]${1}, error)",
      "\t${1}Update(ctx context.Context, ${1}) error",
      "\t${1}Delete(ctx context.Context, id uint) error",
      "}"
    ],
    "description": "CRUD operations for VerticalsResources"
  }
}
